#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂñÆ‰∏ÄËªäÊâãÊØîË≥Ω‰ΩçÁΩÆÂàÜÊûêÊ®°ÁµÑ
Êèê‰æõËªäÊâãÂú®ÊØîË≥Ω‰∏≠ÁöÑ‰ΩçÁΩÆËÆäÂåñÂàÜÊûê
"""

import os
import json
import pickle
from datetime import datetime
from typing import Dict, Any, Optional
from prettytable import PrettyTable

class SingleDriverPositionAnalysis:
    """ÂñÆ‰∏ÄËªäÊâãÊØîË≥Ω‰ΩçÁΩÆÂàÜÊûêÂô®"""
    
    def __init__(self, data_loader, year: int, race: str, session: str):
        self.data_loader = data_loader
        self.year = year
        self.race = race
        self.session = session
        self.cache_dir = "cache"
        
        # Á¢∫‰øùÁ∑©Â≠òÁõÆÈåÑÂ≠òÂú®
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def analyze_position_changes(self, driver: str, **kwargs) -> Dict[str, Any]:
        """ÂàÜÊûêËªäÊâã‰ΩçÁΩÆËÆäÂåñ
        
        Args:
            driver: ËªäÊâã‰ª£Á¢º (Â¶Ç 'VER', 'LEC')
            
        Returns:
            Dict: ÂåÖÂê´‰ΩçÁΩÆÂàÜÊûêÁµêÊûúÁöÑÂ≠óÂÖ∏
        """
        print(f"üèÅ ÈñãÂßãÂàÜÊûêËªäÊâã {driver} ÁöÑÊØîË≥Ω‰ΩçÁΩÆËÆäÂåñ...")
        
        try:
            # ÁîüÊàêÁ∑©Â≠òÈçµ
            cache_key = f"position_analysis_{self.year}_{self.race}_{self.session}_{driver}"
            cache_file = os.path.join(self.cache_dir, f"{cache_key}.pkl")
            
            # Ê™¢Êü•Á∑©Â≠ò
            if os.path.exists(cache_file):
                print("üì¶ ÂæûÁ∑©Â≠òËºâÂÖ•‰ΩçÁΩÆÂàÜÊûêÊï∏Êìö...")
                with open(cache_file, 'rb') as f:
                    cached_result = pickle.load(f)
                
                # È°ØÁ§∫Â∞çÊáâÁöÑ JSON Ê™îÊ°àË∑ØÂæë
                json_file = cache_file.replace('.pkl', '.json')
                if os.path.exists(json_file):
                    print(f"üìÑ Â∞çÊáâ JSON Ê™îÊ°à: {json_file}")
                
                # È°ØÁ§∫‰ΩçÁΩÆËÆäÂåñË°®Ê†º
                self._display_position_analysis_table(cached_result, driver)
                
                print("‚úÖ ‰ΩçÁΩÆÂàÜÊûêÂÆåÊàê (‰ΩøÁî®Á∑©Â≠ò)")
                return cached_result
            
            # ËºâÂÖ•Ë≥Ω‰∫ãÊï∏Êìö
            session_data = self.data_loader.get_loaded_data()
            
            if session_data is None:
                raise ValueError("ÁÑ°Ê≥ïËºâÂÖ•Ë≥Ω‰∫ãÊï∏Êìö")
            
            # ÂæûÊï∏ÊìöÂ≠óÂÖ∏‰∏≠Áç≤ÂèñÂúàÈÄüÊï∏Êìö
            if isinstance(session_data, dict):
                laps_data = session_data.get('laps')
                if laps_data is None:
                    raise ValueError("ÁÑ°Ê≥ïÊâæÂà∞ÂúàÈÄüÊï∏Êìö")
            else:
                laps_data = getattr(session_data, 'laps', None)
                if laps_data is None:
                    raise ValueError("ÁÑ°Ê≥ïÊâæÂà∞ÂúàÈÄüÊï∏Êìö")
            
            # Áç≤ÂèñËªäÊâãÊï∏Êìö
            driver_data = laps_data.pick_driver(driver)
            
            if driver_data.empty:
                raise ValueError(f"Êâæ‰∏çÂà∞ËªäÊâã {driver} ÁöÑÊï∏Êìö")
            
            # ÂàÜÊûê‰ΩçÁΩÆËÆäÂåñ
            result = {
                "success": True,
                "driver": driver,
                "year": self.year,
                "race": self.race,
                "session": self.session,
                "analysis_timestamp": datetime.now().isoformat(),
                "position_analysis": {
                    "starting_position": self._get_starting_position(driver_data),
                    "finishing_position": self._get_finishing_position(driver_data),
                    "position_changes": self._analyze_position_changes(driver_data),
                    "best_position": self._get_best_position(driver_data),
                    "worst_position": self._get_worst_position(driver_data),
                    "total_laps": len(driver_data),
                    "position_statistics": self._calculate_position_statistics(driver_data)
                }
            }
            
            # ‰øùÂ≠òÂà∞Á∑©Â≠ò
            with open(cache_file, 'wb') as f:
                pickle.dump(result, f)
            
            # ÂêåÊôÇ‰øùÂ≠òÁÇ∫ JSON
            json_file = cache_file.replace('.pkl', '.json')
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ JSON ÂàÜÊûêÁµêÊûúÂ∑≤‰øùÂ≠ò: {json_file}")
            
            # È°ØÁ§∫‰ΩçÁΩÆËÆäÂåñË°®Ê†º
            self._display_position_analysis_table(result, driver)
            
            print("‚úÖ ËªäÊâãÊØîË≥Ω‰ΩçÁΩÆÂàÜÊûêÂÆåÊàê")
            return result
            
        except Exception as e:
            print(f"‚ùå ‰ΩçÁΩÆÂàÜÊûêÂ§±Êïó: {e}")
            return {
                "success": False,
                "error": str(e),
                "driver": driver,
                "analysis_timestamp": datetime.now().isoformat()
            }
    
    def _get_starting_position(self, driver_data) -> Optional[int]:
        """Áç≤ÂèñËµ∑Âßã‰ΩçÁΩÆ"""
        try:
            if not driver_data.empty:
                return int(driver_data.iloc[0]['Position'])
        except:
            pass
        return None
    
    def _get_finishing_position(self, driver_data) -> Optional[int]:
        """Áç≤ÂèñÂÆåË≥Ω‰ΩçÁΩÆ"""
        try:
            if not driver_data.empty:
                return int(driver_data.iloc[-1]['Position'])
        except:
            pass
        return None
    
    def _get_best_position(self, driver_data) -> Optional[int]:
        """Áç≤ÂèñÊúÄ‰Ω≥‰ΩçÁΩÆ"""
        try:
            if not driver_data.empty:
                return int(driver_data['Position'].min())
        except:
            pass
        return None
    
    def _get_worst_position(self, driver_data) -> Optional[int]:
        """Áç≤ÂèñÊúÄÂ∑Æ‰ΩçÁΩÆ"""
        try:
            if not driver_data.empty:
                return int(driver_data['Position'].max())
        except:
            pass
        return None
    
    def _analyze_position_changes(self, driver_data) -> Dict[str, Any]:
        """ÂàÜÊûê‰ΩçÁΩÆËÆäÂåñË©≥Á¥∞"""
        try:
            positions = driver_data['Position'].tolist()
            changes = []
            
            for i in range(1, len(positions)):
                change = positions[i-1] - positions[i]  # Ê≠£Êï∏ÁÇ∫ÈÄ≤Ê≠•ÔºåË≤†Êï∏ÁÇ∫ÈÄÄÊ≠•
                changes.append({
                    "lap": i + 1,
                    "from_position": positions[i-1],
                    "to_position": positions[i],
                    "change": change
                })
            
            return {
                "lap_by_lap_changes": changes,
                "total_changes": len([c for c in changes if c['change'] != 0]),
                "positions_gained": sum([c['change'] for c in changes if c['change'] > 0]),
                "positions_lost": abs(sum([c['change'] for c in changes if c['change'] < 0]))
            }
        except:
            return {"error": "ÁÑ°Ê≥ïÂàÜÊûê‰ΩçÁΩÆËÆäÂåñ"}
    
    def _calculate_position_statistics(self, driver_data) -> Dict[str, Any]:
        """Ë®àÁÆó‰ΩçÁΩÆÁµ±Ë®à"""
        try:
            positions = driver_data['Position']
            return {
                "average_position": float(positions.mean()),
                "median_position": float(positions.median()),
                "position_variance": float(positions.var()),
                "time_in_top_5": len(positions[positions <= 5]),
                "time_in_top_10": len(positions[positions <= 10]),
                "time_in_points": len(positions[positions <= 10])  # Ââç10ÂêçÂæóÂàÜ
            }
        except:
            return {"error": "ÁÑ°Ê≥ïË®àÁÆó‰ΩçÁΩÆÁµ±Ë®à"}
    
    def _display_position_analysis_table(self, result: Dict[str, Any], driver: str):
        """È°ØÁ§∫‰ΩçÁΩÆÂàÜÊûêÁµêÊûúË°®Ê†º"""
        try:
            position_data = result.get('position_analysis', {})
            
            print(f"\nüèÅ ËªäÊâã {driver} ÊØîË≥Ω‰ΩçÁΩÆÂàÜÊûêÁµêÊûú")
            print("=" * 80)
            
            # Âü∫Êú¨‰ΩçÁΩÆ‰ø°ÊÅØË°®Ê†º
            basic_table = PrettyTable()
            basic_table.field_names = ["È†ÖÁõÆ", "‰ΩçÁΩÆ", "Ë™™Êòé"]
            basic_table.align["È†ÖÁõÆ"] = "l"
            basic_table.align["Ë™™Êòé"] = "l"
            
            start_pos = position_data.get('starting_position', 'N/A')
            finish_pos = position_data.get('finishing_position', 'N/A')
            best_pos = position_data.get('best_position', 'N/A')
            worst_pos = position_data.get('worst_position', 'N/A')
            total_laps = position_data.get('total_laps', 0)
            
            basic_table.add_row(["Ëµ∑Âßã‰ΩçÁΩÆ", start_pos, "ÊØîË≥ΩÈñãÂßãÊôÇÁöÑ‰ΩçÁΩÆ"])
            basic_table.add_row(["ÂÆåË≥Ω‰ΩçÁΩÆ", finish_pos, "ÊØîË≥ΩÁµêÊùüÊôÇÁöÑ‰ΩçÁΩÆ"])
            basic_table.add_row(["ÊúÄ‰Ω≥‰ΩçÁΩÆ", best_pos, "ÊØîË≥Ω‰∏≠ÈÅîÂà∞ÁöÑÊúÄÈ´ò‰ΩçÁΩÆ"])
            basic_table.add_row(["ÊúÄÂ∑Æ‰ΩçÁΩÆ", worst_pos, "ÊØîË≥Ω‰∏≠ÁöÑÊúÄ‰Ωé‰ΩçÁΩÆ"])
            basic_table.add_row(["Á∏ΩÂúàÊï∏", total_laps, "ÂÆåÊàêÁöÑÁ∏ΩÂúàÊï∏"])
            
            if start_pos != 'N/A' and finish_pos != 'N/A':
                position_change = start_pos - finish_pos
                change_desc = f"ÈÄ≤Ê≠• {position_change} ‰Ωç" if position_change > 0 else f"ÈÄÄÊ≠• {abs(position_change)} ‰Ωç" if position_change < 0 else "‰ΩçÁΩÆÁÑ°ËÆäÂåñ"
                basic_table.add_row(["Á∏Ω‰ΩçÁΩÆËÆäÂåñ", f"{position_change:+d}", change_desc])
            
            print("\nüìä Âü∫Êú¨‰ΩçÁΩÆÁµ±Ë®à:")
            print(basic_table)
            
            # ‰ΩçÁΩÆËÆäÂåñË©≥Á¥∞Ë°®Ê†º (È°ØÁ§∫Ââç 20 ÂúàÁöÑËÆäÂåñ)
            position_changes = position_data.get('position_changes', {})
            lap_changes = position_changes.get('lap_by_lap_changes', [])
            
            if lap_changes:
                change_table = PrettyTable()
                change_table.field_names = ["ÂúàÊï∏", "Âæû‰ΩçÁΩÆ", "Âà∞‰ΩçÁΩÆ", "ËÆäÂåñ", "Ë™™Êòé"]
                change_table.align["Ë™™Êòé"] = "l"
                
                # Âè™È°ØÁ§∫Ââç 20 ÂúàÊàñÊúâËÆäÂåñÁöÑÂúàÊï∏
                display_changes = [c for c in lap_changes[:20] if c.get('change', 0) != 0][:15]
                
                for change in display_changes:
                    lap_num = change.get('lap', 0)
                    from_pos = change.get('from_position', 0)
                    to_pos = change.get('to_position', 0)
                    pos_change = change.get('change', 0)
                    
                    if pos_change > 0:
                        change_desc = f"Ë∂ÖË∂ä {pos_change} ‰Ωç"
                        change_str = f"+{pos_change}"
                    elif pos_change < 0:
                        change_desc = f"Ë¢´Ë∂Ö {abs(pos_change)} ‰Ωç"
                        change_str = str(pos_change)
                    else:
                        change_desc = "‰ΩçÁΩÆ‰øùÊåÅ"
                        change_str = "0"
                    
                    change_table.add_row([lap_num, from_pos, to_pos, change_str, change_desc])
                
                if display_changes:
                    print(f"\nüìà ‰ΩçÁΩÆËÆäÂåñË©≥Á¥∞ (È°ØÁ§∫Ââç {len(display_changes)} ÂÄãËÆäÂåñ):")
                    print(change_table)
                else:
                    print("\nüìà ‰ΩçÁΩÆËÆäÂåñ: ÊØîË≥Ω‰∏≠‰ΩçÁΩÆ‰øùÊåÅÁ©©ÂÆöÔºåÁÑ°ÈáçÂ§ß‰ΩçÁΩÆËÆäÂåñ")
            
            # ‰ΩçÁΩÆÁµ±Ë®àÊëòË¶Å
            stats = position_data.get('position_statistics', {})
            if stats and not stats.get('error'):
                stats_table = PrettyTable()
                stats_table.field_names = ["Áµ±Ë®àÈ†ÖÁõÆ", "Êï∏ÂÄº", "Ë™™Êòé"]
                stats_table.align["Áµ±Ë®àÈ†ÖÁõÆ"] = "l"
                stats_table.align["Ë™™Êòé"] = "l"
                
                avg_pos = stats.get('average_position', 0)
                median_pos = stats.get('median_position', 0)
                top5_time = stats.get('time_in_top_5', 0)
                top10_time = stats.get('time_in_top_10', 0)
                points_time = stats.get('time_in_points', 0)
                
                stats_table.add_row(["Âπ≥Âùá‰ΩçÁΩÆ", f"{avg_pos:.1f}", "Êï¥Â†¥ÊØîË≥ΩÁöÑÂπ≥Âùá‰ΩçÁΩÆ"])
                stats_table.add_row(["‰∏≠‰ΩçÊï∏‰ΩçÁΩÆ", f"{median_pos:.1f}", "‰ΩçÁΩÆÂàÜÂ∏ÉÁöÑ‰∏≠‰ΩçÊï∏"])
                stats_table.add_row(["Ââç5‰ΩçÂúàÊï∏", f"{top5_time} Âúà", f"Âú®Ââç5‰ΩçÁöÑÂúàÊï∏ ({top5_time/total_laps*100:.1f}%)" if total_laps > 0 else "Âú®Ââç5‰ΩçÁöÑÂúàÊï∏"])
                stats_table.add_row(["Ââç10‰ΩçÂúàÊï∏", f"{top10_time} Âúà", f"Âú®Ââç10‰ΩçÁöÑÂúàÊï∏ ({top10_time/total_laps*100:.1f}%)" if total_laps > 0 else "Âú®Ââç10‰ΩçÁöÑÂúàÊï∏"])
                stats_table.add_row(["ÂæóÂàÜÂçÄÂúàÊï∏", f"{points_time} Âúà", f"Âú®ÂæóÂàÜÂçÄÁöÑÂúàÊï∏ ({points_time/total_laps*100:.1f}%)" if total_laps > 0 else "Âú®ÂæóÂàÜÂçÄÁöÑÂúàÊï∏"])
                
                print(f"\nüìä ‰ΩçÁΩÆÁµ±Ë®àÊëòË¶Å:")
                print(stats_table)
            
            # ‰ΩçÁΩÆËÆäÂåñÁ∏ΩÁµê
            if position_changes:
                total_changes = position_changes.get('total_changes', 0)
                positions_gained = position_changes.get('positions_gained', 0)
                positions_lost = position_changes.get('positions_lost', 0)
                
                print(f"\nüìã ‰ΩçÁΩÆËÆäÂåñÁ∏ΩÁµê:")
                print(f"   ‚Ä¢ Á∏Ω‰ΩçÁΩÆËÆäÂåñÊ¨°Êï∏: {total_changes} Ê¨°")
                print(f"   ‚Ä¢ Á¥ØÁ©çÈÄ≤Ê≠•‰ΩçÁΩÆ: {positions_gained} ‰Ωç")
                print(f"   ‚Ä¢ Á¥ØÁ©çÈÄÄÊ≠•‰ΩçÁΩÆ: {positions_lost} ‰Ωç")
                print(f"   ‚Ä¢ Ê∑®‰ΩçÁΩÆËÆäÂåñ: {int(positions_gained - positions_lost):+d} ‰Ωç")
            
            print("=" * 80)
            
        except Exception as e:
            print(f"‚ùå È°ØÁ§∫‰ΩçÁΩÆÂàÜÊûêË°®Ê†ºÂ§±Êïó: {e}")
            # È°ØÁ§∫Âü∫Êú¨‰ø°ÊÅØ‰ΩúÁÇ∫ÂÇôÁî®
            print(f"\nüèÅ ËªäÊâã {driver} ÊØîË≥Ω‰ΩçÁΩÆÂàÜÊûêÁµêÊûú (Á∞°ÂåñÁâà)")
            print(f"ÂàÜÊûêÊôÇÈñì: {result.get('analysis_timestamp', 'Unknown')}")
            print(f"ÂàÜÊûêÁãÄÊÖã: {'ÊàêÂäü' if result.get('success') else 'Â§±Êïó'}")
